openapi: 3.1.0
info:
  title: PackBuilder Actions
  version: "1.0.0"
  description: |
    REST endpoints used by the PackBuilder web app and GPT Action.
    `/api/validate` accepts one or more resource pack ZIPs (multipart/form-data),
    inspects contents, normalizes a manifest and returns any issues/conflicts.
    `/api/create-preview` (optional) can trigger a preview build and return a URL.

servers:
  - url: https://pack-builder-ten.vercel.app

paths:
  /api/health:
    get:
      operationId: health
      summary: Health check for uptime/GPT validator
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  service:
                    type: string
                    example: packbuilder
                  version:
                    type: string
                    example: "1.0.0"

  /api/validate:
    post:
      operationId: validatePacks
      summary: Validate & normalize one or more resource-pack ZIP files
      description: |
        Accepts one or more ZIP files as `multipart/form-data` (field name `files[]` or `files`).
        Each ZIP is scanned, assets are classified, and a normalized manifest + issues are returned.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  description: One or more resource-pack ZIP files
                  type: array
                  items:
                    type: string
                    format: binary
            encoding:
              files:
                contentType: application/zip
      responses:
        "200":
          description: Normalized manifest with issues
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateResponse"
        "400":
          description: Bad request (e.g., no files, invalid ZIP)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "413":
          description: Payload too large (exceeds function limit)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unhandled server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/create-preview:
    post:
      operationId: createPreview
      summary: Create a preview deployment and return a URL
      description: |
        Triggers an optional preview build (e.g., Vercel deploy) for the
        validated bundle and returns a `previewUrl`. If you're not using
        previews yet, implement this as a no-op that returns a dummy URL.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch:
                  type: string
                  example: main
                bundleId:
                  type: string
                  description: Optional id from validate step to re-use parsed state
      responses:
        "200":
          description: Preview build info
          content:
            application/json:
              schema:
                type: object
                properties:
                  previewUrl:
                    type: string
                    example: https://preview.packbuilder.vercel.app/session/abc123
                  buildId:
                    type: string
                    example: build_abc123
        "400":
          description: Bad request (e.g., unknown bundleId)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Unhandled server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    ClassifiedAsset:
      type: object
      properties:
        path:
          type: string
          example: assets/minecraft/textures/gui/icons.png
        category:
          type: string
          enum: [HUD & GUI, Blocks, Items, Entities, Other]
        packNamespace:
          type: string
          example: minecraft
        size:
          type: integer
          description: Bytes
        features:
          type: array
          items:
            type: string
          description: Feature tags (e.g., "hotbar", "hearts", "xp_bar")

    Manifest:
      type: object
      properties:
        packName:
          type: string
        packFormat:
          type: integer
          description: Minecraft pack_format value
        assets:
          type: array
          items:
            $ref: "#/components/schemas/ClassifiedAsset"

    Issue:
      type: object
      properties:
        type:
          type: string
          enum: [CONFLICT, UNSUPPORTED, WARNING]
        message:
          type: string
        paths:
          type: array
          items:
            type: string
          description: Affected in-pack paths
        packs:
          type: array
          items:
            type: string
          description: Pack names involved (optional)

    ValidateResponse:
      type: object
      properties:
        bundleId:
          type: string
          description: Correlates future operations to this validation
        manifests:
          type: array
          items:
            $ref: "#/components/schemas/Manifest"
        issues:
          type: array
          items:
            $ref: "#/components/schemas/Issue"
        maxPackFormat:
          type: integer
          description: Highest pack_format detected across all uploaded packs

    Error:
      type: object
      properties:
        ok:
          type: boolean
          example: false
        error:
          type: string
          example: "Missing files field"
        detail:
          type: string
          example: "Expected multipart/form-data with 'files'"
